아키텍처의 전반적인 흐름
---

## 1. Edge Nodes (병사·드론 노드)

* **Soldier Node / Drone Node**

  * 각 병사나 드론이 GPS, 카메라, (병사 ID 등) 센서를 탑재
  * 일정 주기 혹은 이벤트 발생 시 → 자신이 찍은 이미지 + 위치 + ID 정보를 **암호화된 MQTT/TLS 메시지**로 전송

---

## 2. Message Broker (Kafka / MQTT)

* **역할**

  * 수많은 노드가 보낸 메시지를 안정적으로 받아서
  * 여러 소비자 서비스(Consumer)에게 동시에 배포(퍼블리시/서브스크라이브)
* **장점**

  * 장애가 나도 메시지를 보관 → 복구 시 재처리 가능
  * 노드나 서비스가 늘어나도 확장성 높음

---

## 3. Processing Cluster

1. **Data Ingestion (Kafka Consumer)**

   * 브로커에서 메시지를 읽어 들여
   * JSON 형태(위치, 타임스탬프, 이미지 경로/바이너리)로 파싱

2. **TimeSeries DB 저장**

   * 위치 로그(GPS), 이벤트(“적 발견” 등)는 시계열 DB(InfluxDB, TimescaleDB 등)에 저장
   * 나중에 경로 추적, 행동 패턴 분석에 활용

3. **CNN Inference**

   * 이미지를 받아서 **ResNet/YOLO** 같은 사전 학습된 모델로
   * “적 병사 탐지” / “장비(탱크·BMT) 탐지” 결과(바운딩박스, 클래스, 신뢰도) 생성

4. **Fusion Analysis**

   * 각 노드의 탐지 결과 + 위치 정보를 **GNN(그래프 신경망)** 또는 **Transformer** 기반으로 융합
   * 예:

     * “어느 분대 지역에 적이 얼마나 몰려있는지”
     * “A 지점 적 출현 → B 지점으로 이동할 가능성 예측”

5. **API Server (gRPC / REST)**

   * 위의 처리 결과(요약 통계, Heatmap, 알람 등)를
   * 대시보드·지휘서버·드론 협동 로직에 제공

---

## 4. Command & Control

* **Dashboard**

  * 실시간 지형 지도 위에

    * 노드 위치(병사·드론)
    * 적 탐지 Heatmap(밀집 지역)
    * 예상 이동 경로
  * 지휘관이 현재 상황을 직관적으로 파악

* **Command Server**

  * 노드 구조(분대→소대→중대)를 트리 형태로 관리
  * 작전 명령 발행 시 → 해당 분대·소대 노드에게 **“해당 구역으로 이동”** 등의 메시지 발송

---

## 5. Drone Coordination

* **Drone-Coop Logic Module**

  * 드론이 스스로 “근처 노드가 적을 탐지했다”는 정보를 받아
  * 타겟 좌표로 이동하거나, 여러 드론 간에 역할 분담해 **협동 공격/정찰** 수행

---

### 전체 요약 흐름

1. **노드** → 센서 데이터 → **메시지 브로커**
2. **Ingestion** → **DB 저장** & **CNN 분석**
3. **Fusion** → **API**
4. **Dashboard** & **Command** → 노드/드론에 다시 명령

이 구조 덕분에

* **실시간성**: 센서→브로커→분석→시각화가 지연 없이 이루어지고
* **확장성**: 노드 수가 늘어도 브로커와 클러스터를 수평 확장(Autoscaling)으로 대응 가능하며
* **자율성**: 드론·병사 노드가 중앙 명령 없이도 주변 상황을 인지해 즉시 행동 결정이 가능합니다.
